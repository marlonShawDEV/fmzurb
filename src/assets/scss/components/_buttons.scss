////
/// Custom Revisions to the Foundation Button Design
////





/// Padding inside buttons.
/// @type List
$button-padding: 0.85em 1em !default;

/// Margin around buttons.
/// @type List
$button-margin: 0 0 $global-margin 0 !default;

/// Default fill for buttons. Can either be `solid` or `hollow`.
/// @type Keyword
$button-fill: solid !default;

/// Default background color for buttons.
/// @type Color
$button-background: $primary-color !default;

/// Background color on hover for buttons.
/// @type Color
$button-background-hover: scale-color($button-background, $lightness: -15%) !default;

/// Font color for buttons.
/// @type List
$button-color: $white !default;

/// Alternative font color for buttons.
/// @type List
$button-color-alt: $black !default;

/// Border radius for buttons, defaulted to global-radius.
/// @type Number
$button-radius: $global-radius !default;

/// Sizes for buttons.
/// @type Map
$button-sizes: (
  small: 0.7rem,
  default: 0.875rem,
  large: 1rem,
) !default;


/// Coloring classes. A map of classes to output in your CSS, like `.secondary`, `.success`, and so on.
/// @type Map
$button-palette: $foundation-palette !default;

/// opacity for a disabled button.
/// @type Number
$button-opacity-disabled: 0.25 !default;

/// Background color lightness on hover for buttons.
/// @type Number
$button-background-hover-lightness: -20% !default;

/// Color lightness on hover for hollow buttons.
/// @type Number
$button-hollow-hover-lightness: -50% !default;

// Internal: flip from margin-right to margin-left for defaults
@if $global-text-direction == 'rtl' {
  $button-margin: 0 0 $global-margin $global-margin !default;
}

/// transitions for buttons.
/// @type List
$button-transition: background 0.25s ease-out, color 0.25s ease-out !default;

/// Adds disabled styles to a button by fading the element, reseting the cursor, and disabling pointer events.
@mixin button-disabled {
  opacity: $button-opacity-disabled;
  cursor: not-allowed;

  &:hover, 
  &:focus {
    background-color: $button-background;
    color: $button-color;
  }
}

.button {
	border: 2px solid $button-background;
  background: $button-background;
  color: $button-color;
	border-radius: $button-radius;
  font-weight: $global-weight-bold;
  font-size: map-get($button-sizes, default);
	text-transform: uppercase;
  text-align: center;
  @include disable-mouse-outline;
  display: inline-block;
  line-height: 1;
  cursor: pointer;
  -webkit-appearance: none;  
  transition: $button-transition;
  vertical-align: middle;
  padding: 0.85em 2.25em;
  margin: $button-margin;
  @include breakpoint (small only) {
    margin-bottom: 0.25em;
  }
  &::after,
  &::before {
    transition: $button-transition;
  }
  // Sizes
  @each $size, $value in map-remove($button-sizes, default) {  
    &.#{$size} {
      font-size: $value;   
      padding: $button-padding;  // everything but default      
      @if $size == large {  
        @include breakpoint(large) {
          font-size: calc(16px +  6 * (100vw - 320px) / 1180); 
        }
        @include breakpoint(xxlarge) {
          font-size: rem-calc(22);
          border-width: 3px;
        }
      }
    }
  } 
  &.small {        
    main .medium-up-2 & {
      @media screen and (min-width: -zf-bp-to-em(map-get($breakpoints, medium))) and (max-width: -zf-bp-to-em(map-get($breakpoints, medium) + 80px)) {
        padding: 0.75em 1em;  
      }
      @include breakpoint(large only) {
        padding: 0.75em 1em;  
      }
    }
  }
  .svg-stroke {
    stroke: $white;
  } 
	&:hover,
  &:focus,
  &:active  {
		background: $button-background-hover;
    color: $button-background;    
    .svg-stroke {
      stroke: $button-background;
    }
	}
 @each $name, $color in $button-palette {
    &.#{$name} {
      background: $color;
      border-color: $color;
      .svg-stroke {
        stroke: $white;
      }
      &:hover,
      &:focus,
      &:active {
        background: $button-color;
        color: $color;
        .svg-stroke {
          stroke: $color;
        }
      }
    }
  } 
	&.hollow {
    background: transparent;
      color: $white;
      border-color: $white;
    &:hover,
    &:focus,
    &:active {
      color: $white;
      background: rgba($white, 0.25);
    }
	}
  // Disabled style
  &.disabled,
  &[disabled] {
    @include button-disabled;
  }
  svg { 
    fill: currentColor;
    height: 1em;
    width: 1.25em;
    opacity: 0.9;
    vertical-align: bottom;
    &.large {
      height: 1.5em;
      width: 1.75em;  
      position: relative;
      margin-top: -0.25em;
    }
  }

}
span.button {
  &:hover {
    background: inherit !important;
    cursor: initial;
  }
}
.button-group .button {
  border-radius: 0;
}
p {
  > .button:not(:last-of-type) {
    margin-right: 2.5rem;
  }
}
.button > .filemarker {
  padding-left: 0.25em;
  font-size: 0.9em;
}

@media print {
  .button {
    border-width: 0px !important;
  }
  .filemarker {
    display: none;
  }
}